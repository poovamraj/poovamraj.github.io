[{"content":"Traits vs Skills As an engineer, most of the things you are going to work with will be skills. You can learn a language, with effort understand distributed systems, keep taking Andy Pavlo courses and reading DB books to get good with databases. As long as you have a decent social skill, you can learn (very happily) all the other skills needed to be a great engineer.\nMoving to staff+ role? Having extreme ownership can get you a lot further along with you honing the technical skills.\nIts not the same in Management. A lot of the tools you need to grow in this career seem to be traits. People pleaser? works well as an engineer, try to please people as manager and your roadmap can be in the trash for all you care. Now good luck changing something you were for 30 years of your life.\nThere WILL be times where you have to change yourself. Sometimes they are for the good. They will definitely translate well into your personal life.\nMy manager taught me the lines of Dr. Who that I will never forget \u0026ldquo;Never give in, Never give up, always be kind\u0026rdquo;. These are the things thaty you have to learn more moving forward. Understanding different perspectives and forming your own strong view of the world will be how you become a strong manager.\nAfter reading \u0026ldquo;High Output Management\u0026rdquo;, \u0026ldquo;Manager\u0026rsquo;s Path\u0026rdquo; and \u0026ldquo;The Lean Startup\u0026rdquo;, Now I have ended up reading \u0026ldquo;Bhagavad Gita\u0026rdquo;, \u0026ldquo;Meditations\u0026rdquo; and \u0026ldquo;Tao Te Ching\u0026rdquo;. Might help to build the perspective you need, might even help you with convincing or understanding others.\nBut always look out for characteristics that you have to improve on yourself. Being a manager is going to be a huge part of that.\nCommunication I thought communicating to the team and reports will be the hardest. But that seems to be much easier especially coming from an engineering perspective trying to setup good standards and asking the right engineering questions.\nOn the other hand, communication with the execs has been the hardest as the back and forth ideation of an engineer doesn\u0026rsquo;t work here. You can\u0026rsquo;t rerun the code if you aren\u0026rsquo;t satisfied. Most of the time you have to run only once. Maybe a bit more, but quick iterations is not an option. Everything has to be succinct. The statements made by you have to be correct, factual and clear. Decisions are made based on it. Leaders will comeback to you if there is a misrepresentation.\nEverytime they have to ask an extra question to clarify doubts feels daunting. They are always in a hurry and not making them follow up and ensuring they are also getting all the context needed seems to be very important. Providing the exact right answers without being verbose is a very important skill without assumption on their part is important.\nI am still learning this. A technique I try to follow is using the BLUF pattern where I can give the Bottom Line, Up Front and then go about with my verbose answer seems to work.\nTaking time to think, frame and then respond seems to be accepted if the situation is not a matter of high urgency. Correctness and clarity is preferred over quickness.\nWorking relationship with Peers The reason every manager should have great people skill is not just to work with your engineers. There might be situation to use great people skills with your engineers, I might not have come to that point as I work with the best team.\nBut the main reason is to make it work with your peers. The Product Manager in your team, his boss, the manager in your sister team, the platform teams, their managers, the manager\u0026rsquo;s boss, sales team, and so many more people are now your peers. Unlike sending a code review and trying to figure the common ground on your review, you are going to work with these people working on different priorities.\nYou and your peer are working on achieving 2 outcomes out of the same PR, sometimes they might conflicting against each other. Trying to be prepared for this situation and being ready to work through a compromise, or convincing the other person of your solution, seems to be a huge part of the job. And that need PEOPLE SKILLS.\nThe times I had to put my foot down were one of the most uncomfortable situations. But you learn through them. Most of the time it never comes to this situation as you are working with rational adults who listen to reason. You yourself are one so you are ready to understand the others point of view.\nCoaching People are going to talk to you about career advice. Be prepared to give them. Coaching is a skill of its own. Ensuring you ask right relatable questions rather than going on a monologue of boring advice is very important.\nThere are great many resources on coaching, I am in no way a expert at this. But one technique I seem to lean on is asking questions. Ensuring you are not just ranting advice and instead asking people questions that will point them in the right direction is a much easier way to convince on your thoughts.\nThis helps them be an owner of the solution and helps them pursue it with much more enthusiasm than just pointing them in a direction with a long speech.\nLong speeches might have their area, if you know exactly what you are talking about and you definitely know it fits this situation. But they happen very rarely. Save them for the moment. You will know when it is.\nPrioritization Stopping engineering is one of the biggest hurdle. If you are technically too strong, standing back a bit is going to be a struggle. Don\u0026rsquo;t say yes to everything. Setting expectation with product team and other high priority alerts is going to be a bigger skill to be learnt. Create friction by asking rationalizing questions. Try and slow down the product team who come with highest urgency by asking questions so that they have to rationalize themselves. In the end, there is a good chance the high priority item could wait a few more weeks. This has been the situation for most high priority alerts that I have seen.\nInterviewing Hiring would have already been part of your journey if you have made it to a manager. But hiring manager round expects something very different from technical round.\nAs a hiring manager, you would check for their technical ability, but more importantly you would see whether they would fit into the team.\nAre they too strongly opinionated and not ready to accept feedback. (Mind you strong opinions are good, they just have to be weakly held and open to conversation and feedback). Are they too silent and your team is already silent? well you need a personality that can balance that. Are they able to handle conflicts? Are they able to work in a team? Are they able to challenge the status quo in a healthy way?\nYou can have upto 3 rounds to test their technical skills, but 1 or maximum 2 rounds to check their cultural fit in the team. So test their cultural fit. See if they are bluffing on their interview and try to break them away from the process if they won\u0026rsquo;t fit technically. But definitely ensure they will culturally fit into the team you are trying to build.\n1:1 One of the best ways to grow confidence with the team is by ensuring you \u0026ldquo;Ask don\u0026rsquo;t tell\u0026rdquo;. Especially in the first few weeks, you are going to be only asking. Learn about the team, the things they like, they things they don\u0026rsquo;t like, what they are happy about, what not so much. This is a great period where the team doesn\u0026rsquo;t assume any taste from you and answer to your need. Write their answers down. Try to act on them wherever possible. Want to change the standup time? Good, bring it up in the retro. Team doesn\u0026rsquo;t feel happy about the PR review process? Great! discuss it in the retro. Teams are usually very intuitive on what\u0026rsquo;s not working for them. Trying to understand that and acting on them get\u0026rsquo;s you a long way. There might be situations where the team is in a novel place and you have to set you new proecesses, act with lot of guidance but this won\u0026rsquo;t be the norm.\n1:1s can be a great place to build trust and create a relationship with your team. Know them and it becomes much easier to work with them!\n","permalink":"https://poovamraj.com/blog/learnings/","summary":"\u003ch3 id=\"traits-vs-skills\"\u003eTraits vs Skills\u003c/h3\u003e\n\u003cp\u003eAs an engineer, most of the things you are going to work with will be skills. You can learn a language, with effort understand distributed systems, keep taking Andy Pavlo courses and reading DB books to get good with databases. As long as you have a decent social skill, you can learn (very happily) all the other skills needed to be a great engineer.\u003c/p\u003e\n\u003cp\u003eMoving to staff+ role? Having extreme ownership can get you a lot further along with you honing the technical skills.\u003c/p\u003e","title":"Hard Lessons as a Engineering Manager"},{"content":"Developing a backend application requires huge stability and data modeling is one of the pieces of software that is toughest to migrate hence choosing a reliable and stable technology is a necessity.\nSpring Boot is one of the most reliable frameworks in the Java ecosystem. There are great efforts in developing leaner and better frameworks but Spring Boot seems to have great examples and solutions to many common problems faced in backend development. But it is hard to overlook the aged development methodology and impact on productivity.\nI recently started writing an application and I have overhauled my Spring Boot boilerplate to ensure the latest development productivity improvements can be ensured where ever possible\nData Layer Improvements - Irritating parts of Hibernate I realized OneToOne mapping can have multiple entities on the child table unless we mark it with unique=true. This is one such example where we have to understand the nook and cranny of Hibernate just to avoid severe issues.\nBidirectional mapping to join from child to parent\nWriting complex queries are sometimes impossible due to the domain structure we design\nDefining your SQL tables with Java POJOs might feel all good initially until the reality of complex DB migrations comes into the workflow.\nInitially, to overcome writing the complex queries issues which were impossible with Hibernate, I started looking for replacements that were strongly typed. I stumbled upon jOOQ which I fell in love with instantly. But to be on the cautious side I integrated it and used it just for complex queries. After all, jOOQ itself mentions Hibernate is good for CREATE, UPDATE, and DELETE operations.\njOOQ has the coolest features that no other ORM I have seen has. It generates the Object representation of your Tables using a code-gen module.\nThis can be done by connecting it to a Database but I felt this was an unwanted dependency at build/dev time.\nI overcame this by integrating Liquibase using which jOOQ can generate the Object representation. Initially, this felt like overkill but understanding the uses of DB Migration libraries like Flyway/Liquibase made me realize how important such a tool is for DB migration.\nNow that I had my DB definitions in Liquibase and Object definitions generated by jOOQ it felt obsolete to use Hibernate which I was only using for CREATE, UPDATE, DELETE operations and it started to feel more and more obsolete.\nFinally, I took the big leap of removing the spring-data-jpa dependency as a whole.\nImproving Service Layer Many shy away from Spring Boot because of it being a Java framework. After all, just after hearing the word Java, It is impossible for a developer to not be scared of some pattern like AbstractFactoryBuilderAdapter. But what we have to understand is that it is a JVM-based framework and languages like Scala and Kotlin integrate nicely with Spring Boot. Moving my application from Java to Kotlin felt like a breath of fresh air since I got all the following features along with it\nNullability checks Type inference Data classes Concise code The above efforts made my personal boilerplate feel very similar to Nodejs/Typescript/TypeORM combo that I use at my work.\nJava/JVM is a great piece of software overlooked by many developers for shiny new frameworks. I have seen many startups and recently even a unicorn moving from languages like Go to Java due to many reasons. Some of the most complex features required for enterprise development are built into Java-based frameworks like Spring (For example - I was not able to find Access Control List feature in any other framework but in Spring)\nOriginally Published in Dev.to\n","permalink":"https://poovamraj.com/blog/lean-spring-boot/","summary":"\u003cp\u003eDeveloping a backend application requires huge stability and data modeling is one of the pieces of software that is toughest to migrate hence choosing a reliable and stable technology is a necessity.\u003c/p\u003e\n\u003cp\u003eSpring Boot is one of the most reliable frameworks in the Java ecosystem. There are great efforts in developing leaner and better frameworks but Spring Boot seems to have great examples and solutions to many common problems faced in backend development. But it is hard to overlook the aged development methodology and impact on productivity.\u003c/p\u003e","title":"Make Spring Boot Lean And Mean - Throwing Away Hibernate and Java from Spring Boot"},{"content":"The most important thing when learning a new framework, especially ones which have a new way of doing things is to understand how to think (or design) solutions to a problem.\nNext.js claims the major issue it fixes on top of React.js is \u0026ldquo;Pre Rendering\u0026rdquo;\nWhat is Pre Rendering Historically frameworks like JSP used to render the HTML content of the page on the server-side and send the rendered HTML page to the browser. This is in contrast to the approach used in modern frameworks like React.js where the web page first loads the JS and then it renders all the required HTML elements on the client (read it as the browser) side\nThe concept of Client-side rendering works well as it completely separates the backend and frontend. But there are certain issues that can arise from client-side rendering.\nSearch Engines tend to parse the HTML file and index it. This scraping process is not optimized for sites that do client-side rendering.\nWhen you are rendering on the client end, whenever an API call is made, the request has to travel all the way from the client who can be in the US to the server which can reside in JAPAN. This can severely slow down the performance. Instead, if we are rendering on the server end, most of the data can be fetched easily as the rendering can happen at the same place as the server.\nIf you do not have the above 2 use-cases, you can simply use the traditional client-side rendering application. At least, that\u0026rsquo;s what I am doing.\nThis concept is generally called Server-Side Rendering (SSR)\nBut Next.js tends to use the word \u0026ldquo;Pre Rendering\u0026rdquo;. This is to distinguish the two major use cases the framework is used for\nStatic Rendering Server-Side Rendering Static Rendering When the HTML code is generated as soon as we run the build, This is called static rendering.\nStatic rendering is useful for Homepages or Blogs where the content of the page doesn\u0026rsquo;t change often (For example - each reload won\u0026rsquo;t have different data like a stock market site).\nWe can write a \u0026ldquo;Page\u0026rdquo; by exporting a JSX component under the pages folder.\nFor example - writing a js file named \u0026lsquo;hello.js\u0026rsquo; that exports a JSX component under the pages folder will give us a\nlocalhost:3000/hello page\nCreating a new folder will add it as a path.\nFor example - creating a folder named \u0026lsquo;blog\u0026rsquo; under pages folder with a js file named hello that returns a JSX component provides us with\nlocalhost:3000/blog/hello page\nIt is as simple as writing an HTML file under a webserver and accessing it using its path.\nNext.js also provides a feature where the static pages can be rendered dynamically. Let me explain a use case\nLet\u0026rsquo;s say you write blogs that are maintained in a Database (actually they are usually maintained in a component called Headless CMS, but for simplicity, let\u0026rsquo;s say a database)\nIf you want to fetch the content from that database instead of writing the content of the blog directly on the JS file. You can use the method getStaticProps\nThis will fetch us the content of the blog \u0026ldquo;WHILE BUILDING THE PROJECT\u0026rdquo; and pre-render the HTML pages for us\nServer-Side Rendering The HTML code is generated only when the request hits our server for Server-Side Rendering.\nThis is useful for use cases like Forum or Saas applications That has the potential to change for each request.\nThe pages (or routing) concept is similar to static rendering. Any js file returning a JSX component inside the pages folder is a separate page (or route)\nEach time this route is called on the browser, the Next.js framework tends to render the page and provide a full HTML page as a response.\nAny data that needs to be fetched from the backend for rendering this page can be returned using getServerSideProps.\nFor example - A table with all the stock prices can be rendered each time when a request is made. The required data to fill the stock price can be fetched inside getServerSideProps. Since the rendering can happen at the same location as the backend, the round trip time to make this request will be very very less.\nDynamic Routing There can be a use case where all the routes will not be known to us. For example - In the previous blog example I mentioned where the content can be fetched from the DB, Imagine what will happen when a new blog is added to the DB.\nWe cannot be writing a new page each time a new blog is written right? (i.e) The routes that can be reached can change dynamically based on a different source of data rather than the JS files we created.\nFor this, we have the concept of Dynamic Rendering. Any file under the pages folder with the name wrapped with brackets like [].js can have a method called getStaticPaths which can be used to return all the possible paths. These paths can also be rendered for each request using an option called blocking which needs to be set in the return value.\nConclusion Understanding the mental model of a framework easily helps us solve problems using that framework. While first learning React we all would have faced the issue of understanding the uses of a \u0026ldquo;state\u0026rdquo; and a \u0026ldquo;prop\u0026rdquo; while now it can be written without a second thought. In a similar way, to learn Next.js, the first thing to learn would be the uses of\ngetStaticProps getServerSideProps getStaticPaths Next.js provides a lot more great features like . But once the above differences and uses are understood, the rest should be a walk in the park!\nI would love to discuss this topic and learn more if you have something to share!\nOriginally Published in Dev.to\n","permalink":"https://poovamraj.com/blog/next-js-mental-model/","summary":"\u003cp\u003eThe most important thing when learning a new framework, especially ones which have a new way of doing things is to understand how to think (or design) solutions to a problem.\u003c/p\u003e\n\u003cp\u003eNext.js claims the major issue it fixes on top of React.js is \u0026ldquo;Pre Rendering\u0026rdquo;\u003c/p\u003e\n\u003ch2 id=\"what-is-pre-rendering\"\u003eWhat is Pre Rendering\u003c/h2\u003e\n\u003cp\u003eHistorically frameworks like JSP used to render the HTML content of the page on the server-side and send the rendered HTML page to the browser. This is in contrast to the approach used in modern frameworks like React.js where the web page first loads the JS and then it renders all the required HTML elements on the client (read it as the browser) side\u003c/p\u003e","title":"How to think in Next.js - Learn the Mental Model"},{"content":"The most important part of coding I would consider would be abstraction. When designing in Java or other OOPs it is heavily considered to design your code base in such a way that there is proper abstraction or it could cause lot of issues. A single class should have a single responsibility and it should not allow other classes to mess with it. It should only provide the needed information also in a manner that the class could be changed with another implementation without any of the other classes knowing about this. The next important part would be for the developer to know at what STATE the program is. If the program has moved from STATE A to STATE B this should be because the developer wanted it to happen not because of some side effect. This exactly what happens when we allow mutation. There will be millions of states our program can enter into without our own knowledge. This will make it hard to track down bugs since we wont even know how it moved from one state to another (ReactJS with Redux solves this same problem where each of the state the application goes into is tracked)\nErlang is a language that comprises all the good practices of coding and they provide only the essentials. They don’t allow the developer to go beyond these practices as the authors of language have rightly assumed, if there is a shortcut that can be taken then our evolutionary human brain always takes the easiest path and messes up the code. Erlang used to have mutability to it and the authors of the language analyzed it causes lots of bugs (which as we all know it really does) and removed it from the language\nI guess another major cause of issues that is caused in our programs is mutability. When we are allowed to mutate a state from multiple locations then eventually we cant keep track of what are all the state our program can go into. We humans are not smart enough to magically understand all the infinite states that can occur when you allow mutation in your code. Accept we are dumb, dont allow mutation. This will allow us to predict and keep track of how many states our program can go into and how they can go into them. When we write a code then we should be able to say what are all the possible states the program can go into and there should no side effects that can happen to our code due to change of state in some other part of our application. When you give 2,2 as parameter to your add() function in no circumstance should it return value based on the state of the application. It should always invariably be 4. Though it might feel obvious, think of how many functions we would have written that will never follow this simple rule. Next time you write a function remember it this way f(x,y) -\u0026gt; x + y. This is the function in math, you wont expect this function to return value different based on the state\nThink of writing a application as writing state machines*. Consider we are running 100s of state machines that interact with each other. Since state machines can always let us know what series of steps led the program to eventually end up at that particular place which caused the crash, we can easily reproduce it. Erlang makes this really really easy for us.\nEach Java thread costs us 2MB in memory that means if you run a thread pool of lets say 10000 threads, boom, you get out of memory. This without doing anything not a single variable assigned a value. A thread costs us 2MB in memory. Where as process in Erlang takes a mere 16bits so you can run millions of process in your same VM without a problem. (Coroutines in Kotlin is also said to be really lightweight but it comes with same problems of mutating values in memory which is not possible in Erlang.)\nAnd another beauty of process is you can communicate between processes only using protocol. This is a common problem in language like java where you mutate the state from one thread and it causes a crash in another thread. Since mutation is anyway not allowed in Erlang this is avoided. But also the beauty of using protocols to communicate between process is it can allow you to structure your code in such a way that each separate process can be considered as its own service in a micro service architecture and you are communicating between different micro services. What is the use of this? Lets say one of your process crashes then you can easily start it back (since it is not state dependent) without causing rest of your application to follow it. You will also think more carefully when writing the program since Erlang will make you do so, Your process/service will have separation of concern and single responsibility.\nWhy you should look into Erlang development? Erlang is the secret sauce that made Whatsapp scale to millions of users in a single server. There are stories that say that a application written in Erlang has been running for 21 years with 0 Downtime. It is functional language (learning to code in functional language is like learning to drive a car. We developers have been driving 2 wheeler(OOPs) for too long. Try a functional language it makes you feel like you don’t know anything about coding. Just the same feeling when you try to drive a car first time. It is totally alien and gives you broader perspective with respect to coding)\nOriginally Published in Medium\n","permalink":"https://poovamraj.com/blog/erlang/","summary":"\u003cp\u003eThe most important part of coding I would consider would be abstraction. When designing in Java or other OOPs it is heavily considered to design your code base in such a way that there is proper abstraction or it could cause lot of issues. A single class should have a single responsibility and it should not allow other classes to mess with it. It should only provide the needed information also in a manner that the class could be changed with another implementation without any of the other classes knowing about this. The next important part would be for the developer to know at what STATE the program is. If the program has moved from STATE A to STATE B this should be because the developer wanted it to happen not because of some side effect. This exactly what happens when we allow mutation. There will be millions of states our program can enter into without our own knowledge. This will make it hard to track down bugs since we wont even know how it moved from one state to another (ReactJS with Redux solves this same problem where each of the state the application goes into is tracked)\u003c/p\u003e","title":"Code like you are coding in Erlang"},{"content":"This blog is aimed at people who haven’t heard of flutter and would like to take a shallow dive into it\nMany of you already would have heard about this new Google’s framework. It was proposed and the beta was released a few weeks back. It is a framework in development. If you haven’t heard of it, then the next sentence I am going to tell will mostly make you close this post\nit is a framework for cross-platform mobile development As we all know there are a lot of cross-platform development frameworks but none beats the user experience of a natively developed application. A few months back here I was trying to appeal for React Native. But when I took it for a full spin for a fun project. I fell flat on my face.\nThere were many shortcomings when it came to React Native. Since mobile applications heavily depend on swipe-based user interaction and React Native heavily depends on a bridge that makes the JS code run on the native engine. This caused a lot of janking due to bottleneck. List Views using React Native was a nightmare. This was all based on that one bridge that helped the JS code pass on to the native interface and render natively. This bridge was a huge problem. Burn that bridge!!\nHow is flutter different from React Native and native development\nIf you have heard of the new framework called Svelte for JS which compiles your code to vanilla JS. That’s how flutter is different from React Native. It cuts off all the hassle and instead compiles your code ahead of time. So no mess for the user, no mess for the developer, it would be the job of the framework maintainers to make sure flutter compiles into an optimized proper native instruction set. how neat is that! Unlike React Native deviously in its name suggesting it runs on native but in real runs over a JS engine which communicates with the native.\nIf you haven’t experienced hot reload in your life as a front end developer, you should seriously do it at least just for the fun of it. It is like finding the holy grail of front end development. All the code changes that you do are reflected on your device just by the click of ctrl+s. How cool is that? It is like your code is a paintbrush and all your strokes are reflected instantaneously with a ctrl+s. And flutter supports this, but so does React Native, ReactJS and many other. But an Android instant run can’t even be compared to a hot reload.\nIf Flutter could provide what it promises. Then similar to web development, we wouldn’t be needing double the people writing code for mobile apps. The code base could be shared and our release cycles and productivity would skyrocket.\nFlutter provides widgets. Being a mobile developer since the beginning and having to write my own widgets from scratch like a web developer, felt weird when I developed using React Native. Flutter promises set of widgets that are provided by the framework itself. This (at least for me) is a huge plus\nDisadvantages\nAs I was getting a little excited about this framework, There was one big blow that raised a huge concern. The language used for this framework, DART, is single threaded. I can’t wrap my amateur head over the fact that any serious programming language could be single threaded (Looking at you Javascript ಠ_ಠ ). But to be honest there seem to be alternatives provided by DART to the highly vulnerable traditional threading. but as of DART 1, shared memory threads are not possible.\nDoes not have any specialized layout language to define your UI. This is something similar to the current situation of iOS developers where they have to define their View using code or the alternatives suck. How awkward is that iOS developers? (asked the Android developer from the comfort of his constraint layout). Having a separate layout language to define your views is beneficial in many ways but it is most helpful in separating your business logic from your Views.\nStill not convinced? Sit back and listen to this cool metaphor I thought of while driving. Having a layout language in your front end framework is like having a hard divider in the road your driving. When there are no dividers, Even though you know that it is the best practice to drive on the left side(or right side, depending on where you are from) of the road and most of the time you do drive on the correct side. There are always those rogue drivers or special cases where the vehicles pass to the other side. Having a layout language is like having that divider. You can be assured that in no case does your code goes spaghetti because of it.\nCould Web take over before Flutter could raise to its power? We all mobile developers know that one day the web will take over the front end of mobile applications, ruthlessly, mercilessly, just like it swallowed the desktop applications. But it is a matter of time. It will take sometime before Flutter could create a community and have a stable foot over the mobile platform even if it has very high levels of awesomeness. But could Web take over before flutter does this? There are already cool websites popping out that challenges the boundaries of Progressive web apps. Only time could answer this question. All that said. Talking glory about Flutter and saying it can save us from the tyranny of maintaining 2 code bases at this stage is like one of those statements which say DRINKING COFFEE CURES CANCER. Flutter is in its early stages with very little data set/experience even to be considered to be used in serious or existing code bases. It is an attempt and hopefully something that will improve lives of the developers and in turn the users.\nBut damn, Now we mobile developers have a new toy to play with and I know which framework I am going to use for my next fun project.\nOriginally Published in Medium\n","permalink":"https://poovamraj.com/blog/flutter/","summary":"\u003cp\u003eThis blog is aimed at people who haven’t heard of flutter and would like to take a shallow dive into it\u003c/p\u003e\n\u003cp\u003eMany of you already would have heard about this new Google’s framework. It was proposed and the beta was released a few weeks back. It is a framework in development. If you haven’t heard of it, then the next sentence I am going to tell will mostly make you close this post\u003c/p\u003e","title":"Native \u003e Flutter \u003e React Native"},{"content":"Disclaimer: The article is written based on intuitions and not data driven. It is based on the heuristics and biases at that time and hence It could be wrong. I would love to learn if there are any pitfalls in this article or any variables that I haven’t considered from you people in the comments\nI recently came across a beautiful startup who make apps for end users. Their apps seem to be generating a good amount of downloads. As I ventured deep into their customer feedback and revenue model. I figured they give apps to users at free of cost and after the app generates a good amount of users, they try to make certain features premium.\nThis really pisses off the users. Like reaaaaallyyy. and they vent out their anger in the market place and feedback area. This is something you don\u0026rsquo;t want to happen for any company especially a small startup. This would bring down the team morale, affects the downloads and off all, your app would start to lose all the good users you used to have.\nBut sure, the people who are behind these situations would have thought about these scenarios, weighed the outcomes and took the decision considering the trade offs. After all they are in for the money, they are not some charity that makes apps so that the general population can replace their ears with cat ears in a photo.\nSo how can a startup make money by making apps (or any application) for the end users/ consumers.\nIts simple. You don\u0026rsquo;t!\nI just read the line I wrote above and it feels very pessimistic. But hear out my (could be faulty) intuitions.\nOff all the major tech companies that operate right now, How many of the tech companies can u count that makes money using this model. By making “end users” BUY their software. The only companies/services that comes to mind right away are Spotify and Netflix. Consumers have been made to feel privileged to get their software needs for free by companies like Google, Facebook and other companies, who don’t make money by making people BUY their product but instead make money by making people USE their products. The price we pay for using an amazing search engine or a ‘used to be good’ social network is our data.\nTake any company for that matter. Whatsapp before being acquired by the EA of social network planned on having a subscription model where the users would have to BUY Whatsapp after a year of free usage. I remember a really really fare price put out by Whatsapp. But my (could be faulty) judgement says if they continued with that model we would have moved to any other free player in the industry since we are just not ready to buy softwares by paying our hard earned money.\nMaybe the market is too diluted, Maybe we are pushed into a habit where we feel privileged as consumers to get our tech needs satisfied by not paying for the developer who worked as hard as anybody else to get it running so that you can replace your ears with cat ears !!\nI wanted to use a data recovery software recently to recover few MB of not so important data and I felt appalled when I couldn’t find the product I was trying to download didn’t have a free version. I felt so conflicted when I realized I felt anger over something because I wanted it without paying for it (FYI Later, I did find the same product having a free version deep inside their website).\nFrom my very short experience and observation in the tech industry, I could muster only 3 models that have been working well\nYour customers don’t use your product, You use your customer (i.e) get their data and make profit from it You act as a online store selling your or other companies product (i.e) market places like amazon YOU SELL SOFTWARES TO ENTERPRISE The last model is what I feel that has panned out well for many tech companies. because that\u0026rsquo;s the only model you can actually deal with your problems in a statistical and logical way. To attain the status what Facebook and Snapchat has attained today you need a lot of virality. And there is no science to virality. As one of the interesting person I had the opportunity to meet in this world says “Apart from doing its job, your app has to give those quick hits of dopamine” to become viral. and alas those dopamine hits can always be tempting to be misused by the companies.\nBut when you are selling to a enterprise. you make software that gets the job done (maybe with certain feel good features). And this can be done for the most part just by gathering the requirement and fulfilling them. This is advantageous for everyone. You don’t take advantage over your users which is a big win when it comes to the morality of the company. You don’t wander searching for the next viral thing instead you search for good product that will make users more productive.\nMy ideology on this matter could have been inspired by the amazing place I work at right now called ZOHO where we provide suite of products to run your entire business or maybe because I saw many consumer startups fail. In the end all that matters is making a profit without exploiting the customers.\nTL;DR — why it is awesome making products for enterprises rather than end users.\nOriginally Published in Medium\n","permalink":"https://poovamraj.com/blog/consumer-app/","summary":"\u003cp\u003eDisclaimer: The article is written based on intuitions and not data driven. It is based on the heuristics and biases at that time and hence It could be wrong. I would love to learn if there are any pitfalls in this article or any variables that I haven’t considered from you people in the comments\u003c/p\u003e\n\u003cp\u003eI recently came across a beautiful startup who make apps for end users. Their apps seem to be generating a good amount of downloads. As I ventured deep into their customer feedback and revenue model. I figured they give apps to users at free of cost and after the app generates a good amount of users, they try to make certain features premium.\u003c/p\u003e","title":"Why you can’t make money in consumer applications?"}]